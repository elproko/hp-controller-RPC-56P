esphome:
  name: rpc56p-sensor
  includes:
    - rpc56p_sensor.h

esp8266:
  board: esp12e

uart:
  id: uart_bus
  tx_pin: TX
  rx_pin: RX
  baud_rate: 19200
#  debug:
#    direction: RX
#    dummy_receiver: false
#    after:
#      delimiter: "\n"
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);

#modbus:
#  uart_id: uart_bus
#  flow_control_pin: GPIO4
  
status_led:
  pin:
    number: GPIO16
    inverted: yes
    
logger:
  id: component_logger
  level: DEBUG
#  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:

web_server: 
  port: 80   
  
button:
  - platform: restart
    id: button_restart
    name: "${name} Restart"

sensor:
- platform: custom
  lambda: |-
    auto rpc_s = new RPC56pSensor(id(uart_bus)); 
    App.register_component(rpc_s);
    return {rpc_s->in_temp_sensor, rpc_s->out_temp_sensor, rpc_s->top_temp_sensor, rpc_s->bottom_temp_sensor, rpc_s->water_temp_sensor, rpc_s->alarms_sensor, rpc_s->relays_sensor};

  sensors:
    - name: "RPC-56P room temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "RPC-56P outside temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "RPC-56P top source temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "RPC-56P bottom source temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "RPC-56P water temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "RPC-56P alarms sensor"
    - name: "RPC-56P relays sensor"

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  output_power: 10dBm

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rpc56P-Sensor Fallback Hotspot"
    password: !secret ap_password

captive_portal:
    